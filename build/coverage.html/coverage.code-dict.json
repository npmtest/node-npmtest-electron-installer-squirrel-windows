{"/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/test.js":"/* istanbul instrument in package npmtest_electron_installer_squirrel_windows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/lib.npmtest_electron_installer_squirrel_windows.js":"/* istanbul instrument in package npmtest_electron_installer_squirrel_windows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_installer_squirrel_windows = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_installer_squirrel_windows = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-installer-squirrel-windows && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_installer_squirrel_windows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_installer_squirrel_windows\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_installer_squirrel_windows.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_installer_squirrel_windows.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_installer_squirrel_windows.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_installer_squirrel_windows.__dirname + '/lib.npmtest_electron_installer_squirrel_windows.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/lib/index.js":"var cp = require('child_process');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar series = require('async').series;\nvar format = require('util').format;\nvar _template = require('lodash.template');\nvar Model = require('./model');\nvar debug = require('debug')('electron-installer-squirrel-windows');\nvar os = require('os');\n\nconst NUGET_EXE = path.resolve(__dirname, '..', 'vendor', 'nuget.exe');\nconst SYNC_RELEASES_EXE = path.resolve(__dirname, '..', 'vendor', 'SyncReleases.exe');\nconst UPDATE_EXE = path.resolve(__dirname, '..', 'vendor', 'Update.exe');\nconst UPDATE_COM = path.resolve(__dirname, '..', 'vendor', 'Update.com');\nconst NUSPEC_TEMPLATE = path.resolve(__dirname, '..', 'template.nuspec');\n\nfunction exec(cmd, args, done) {\n  debug('exec `%s` with args `%s`', cmd, args.join(' '));\n\n  fs.exists(cmd, function(exists) {\n    if (!exists) {\n      return done(new Error('File does not exist at ' + cmd));\n    }\n    cp.execFile(cmd, args, function(err, stdout, stderr) {\n      if (err) {\n        console.error('Error ', err);\n      }\n      if (stderr) {\n        console.error(stderr);\n      }\n      console.log('stdout', stdout);\n      return done(err);\n    });\n  });\n}\n\nfunction syncReleases(app, done) {\n  if (!app.remote_releases) {\n    debug('no remote releases.  skipping sync.');\n    return process.nextTick(function() {\n      return done();\n    });\n  }\n\n  exec(SYNC_RELEASES_EXE, ['-u', app.remote_releases, '-r', app.out], done);\n}\n\nfunction createTempDirectory(app, done) {\n  debug('creating temp directory');\n  var res = os.tmpdir();\n    app.nuget_out = res;\n    app.nuspec_path = path.join(app.nuget_out, app.nuspec_filename);\n    app.nupkg_path = path.join(app.nuget_out, app.nupkg_filename);\n    done();\n}\n\nfunction createNugetPkg(app, done) {\n  debug('generating .nuspec file contents');\n  fs.readFile(NUSPEC_TEMPLATE, function(err, buf) {\n    if (err) return done(err);\n\n    var template = _template(buf);\n    var nuspecContent = template(app.serialize());\n\n    debug('.nuspec file contents:\\n', nuspecContent);\n\n    debug('writing nuspec file to `%s`', app.nuspec_path);\n    fs.writeFile(app.nuspec_path, nuspecContent, function(err) {\n      if (err) return done(err);\n\n      var dest = path.join(app.path, 'Update.exe');\n      debug('copying `%s` -> `%s`', UPDATE_EXE, dest);\n      fs.copy(UPDATE_EXE, dest, function(err) {\n        if (err) return done(err);\n\n        debug('generating `%s`...', app.nuget_out);\n        exec(NUGET_EXE, [\n          'pack',\n          app.nuspec_path,\n          '-BasePath',\n          app.path,\n          '-OutputDirectory',\n          app.nuget_out,\n          '-NoDefaultExcludes'\n        ], done);\n      });\n    });\n  });\n}\n\nfunction createSetupExe(app, done) {\n  var args = [\n    '--releasify',\n    app.nupkg_path,\n    '--releaseDir',\n    app.out,\n    '--loadingGif',\n    app.loading_gif\n  ];\n\n  if (app.sign_with_params) {\n    args.push.apply(args, ['--signWithParams', app.sign_with_params]);\n  } else if (app.cert_path && app.cert_password) {\n    args.push.apply(args, [\n      '--signWithParams',\n      format('/a /f \"%s\" /p \"%s\"', path.resolve(app.cert_path), app.cert_password)\n    ]);\n  }\n\n  if (app.setup_icon) {\n    args.push.apply(args, ['--setupIcon', path.resolve(app.setup_icon)]);\n  }\n\n  return exec(UPDATE_COM, args, function(err) {\n    if (err) return done(err);\n    debug('mv `%s` -> `%s`', path.join(app.out, 'Setup.exe'), app.setup_path);\n    fs.rename(path.join(app.out, 'Setup.exe'), app.setup_path, function(err) {\n      if (err) return done(err);\n      done();\n    });\n  });\n}\n\n// @todo (imlucas): Move to its own module `electron-installer-overwrite-check`\nfunction checkForExisting(app, done) {\n  var check = function(filename) {\n    return function(cb) {\n      var src = path.join(app.out, filename);\n\n      fs.exists(src, function(exists) {\n        if (!exists) return cb();\n\n        if (exists && !app.overwrite) {\n          var msg = format('`%s` already exists!'\n            + ' Run electron-installer-squirrel-windows again with'\n            + ' `--overwrite` or just remove the file at `%s` yourself'\n            + ' and run again.', filename, src);\n          return cb(new Error(msg));\n        }\n        debug('Removing existing `%s`', filename);\n        fs.unlink(src, cb);\n      });\n    };\n  };\n\n  series([\n    check(app.nupkg_filename),\n    check(app.setup_filename),\n    check('RELEASES')\n  ], done);\n}\n\n// @todo (imlucas): Add chokadir to watch `out` for nupkg, RELEASES and setup.exe\n// to be created so we can get rid of this silly 20second set timeout in functional tests.\nmodule.exports = function(opts, done) {\n  debug('generating squirrel-windows installer for', JSON.stringify(opts, null, 2));\n  var app = new Model(opts, function(err) {\n    if (err) return done(err);\n    series([\n      checkForExisting.bind(null, app),\n      createTempDirectory.bind(null, app),\n      createNugetPkg.bind(null, app),\n      syncReleases.bind(null, app),\n      createSetupExe.bind(null, app)\n    ], done);\n  });\n};\n\nmodule.exports.NUGET_EXE = NUGET_EXE;\nmodule.exports.SYNC_RELEASES_EXE = SYNC_RELEASES_EXE;\nmodule.exports.UPDATE_EXE = UPDATE_EXE;\nmodule.exports.UPDATE_COM = UPDATE_COM;\nmodule.exports.NUSPEC_TEMPLATE = NUSPEC_TEMPLATE;\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/lib/model.js":"var debug = require('debug')('electron-installer-squirrel-windows:model');\nvar asar = require('asar');\nvar Model = require('ampersand-model');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar each = require('lodash.foreach');\nvar clone = require('lodash.clone');\nvar assign = require('lodash.assign');\nvar titlecase = require('titlecase');\nvar defaults = require('./defaults');\nvar format = require('util').format;\n\nvar createSyncErrback = require('./create-sync-errback');\n\n// @todo (imlucas): move this to `electron-installer-model`\nvar App = Model.extend({\n  props: {\n    name: 'string',\n    version: 'string',\n    description: 'string',\n    copyright: 'string',\n    // Path to the app.\n    path: 'string',\n    // Directory to put installers in.\n    out: 'string',\n    product_name: 'string',\n    electron_version: {\n      type: 'string',\n      default: function() {\n        // @todo (imlucas): make a module that just has the latest electron\n        // version number, e.g.\n        // require('electron-latest-version');\n        // -> '0.29.2'\n        return defaults.ELECTRON_VERSION;\n      }\n    },\n    authors: 'string',\n    owners: 'string',\n    title: 'string',\n    exe: 'string',\n    icon_url: 'string',\n    setup_icon: 'string',\n    loading_gif: 'string',\n    cert_path: 'string',\n    cert_password: 'string',\n    sign_with_params: 'string',\n    remote_releases: 'string',\n    setup_filename: 'string',\n    // @todo (imlucas): Support squirrel.windows `setup_icon`.\n    nuget_id: 'string',\n    overwrite: {\n      type: 'boolean',\n      default: false\n    }\n  },\n  derived: {\n    asar: {\n      deps: ['resources'],\n      fn: function() {\n        if (!this.resources) return undefined;\n        return path.join(this.resources, 'app.asar');\n      }\n    },\n    resources: {\n      deps: ['path'],\n      fn: function() {\n        if (!this.path) return undefined;\n        return path.join(this.path, 'resources');\n      }\n    },\n    setup_path: {\n      deps: ['out', 'setup_filename'],\n      fn: function() {\n        if (!this.out || !this.setup_filename) return undefined;\n        return path.join(this.out, this.setup_filename);\n      }\n    },\n    nuspec_filename: {\n      deps: ['nuget_id'],\n      fn: function() {\n        return format('%s.nuspec', this.nuget_id);\n      }\n    },\n    nupkg_filename: {\n      deps: ['name', 'version'],\n      fn: function() {\n        return format('%s.%s.nupkg', this.nuget_id, this.version);\n      }\n    }\n  },\n  parse: function(resp) {\n    resp.name_original = resp.name;\n    resp.name = titlecase(resp.name.replace(/-/g, ' ')).replace(/ /, '');\n    resp.product_name = resp.product_name || resp.productName || resp.name;\n    resp.icon_url = resp.icon_url || resp.iconUrl;\n\n    if (!resp.authors) {\n      resp.authors = resp.author ? resp.author.name : '';\n    }\n    if (!resp.exe) {\n      resp.exe = format('%s.exe', resp.name);\n    }\n\n    resp.loading_gif = resp.loading_gif || resp.loadingGif;\n    if (!resp.loading_gif) {\n      resp.loading_gif = defaults.LOADING_GIF;\n    }\n\n    if (!resp.owners) {\n      resp.owners = resp.authors;\n    }\n\n    if (!resp.title) {\n      resp.title = resp.product_name;\n    }\n\n    resp.icon_url = resp.icon_url || resp.iconUrl;\n    if (!resp.icon_url) {\n      resp.icon_url = defaults.ICON_URL;\n    }\n\n    if (!resp.copyright) {\n      resp.copyright = format('%s %s', new Date().getFullYear(), resp.owners);\n    }\n\n    if (!resp.setup_filename) {\n      resp.setup_filename = format('%sSetup.exe', resp.name);\n    }\n\n    if (!resp.nuget_id) {\n      resp.nuget_id = resp.name;\n    }\n\n    resp.version = resp.version.replace(/-.*$/, '');\n    return resp;\n  },\n  loadPackageJsonFromResources: function(done) {\n    var src = path.join(this.resources, 'app', 'package.json');\n    fs.readFile(src, function(err, buf) {\n      if (err) return done(err);\n\n      done(null, JSON.parse(buf));\n    });\n  },\n  loadPackageJson: function(done) {\n    if (!this.asar) {\n      return this.loadPackageJsonFromResources(done);\n    }\n    fs.exists(this.asar, function(exists) {\n      if (exists) {\n        done(null, JSON.parse(asar.extractFile(this.asar, 'package.json')));\n      } else {\n        this.loadPackageJsonFromResources(done);\n      }\n    }.bind(this));\n  },\n  sync: function(method, model, options) {\n    this.path = options.path;\n    this.out = options.out;\n    var done = createSyncErrback(method, model, options);\n\n    var overrides = clone(options);\n    delete overrides.parse;\n    delete overrides.path;\n    debug('sync called w/ overrides', JSON.stringify(overrides, null, 2));\n\n    this.loadPackageJson(function(err, data) {\n      if (err) {\n        debug('error loading package json', err);\n        return done(err);\n      }\n      var res = assign(data, overrides);\n      done(null, res);\n    });\n  },\n  initialize: function(opts, fn) {\n    if (typeof opts === 'string') {\n      opts = {\n        path: opts\n      };\n    }\n    if (!fn) return;\n\n    if (!opts.path) {\n      process.nextTick(function() {\n        fn(new TypeError('Missing required `path` param.'));\n      });\n      return;\n    }\n\n    if (!opts.out) {\n      opts.out = path.resolve(opts.path, '..');\n    }\n\n    this.on('sync', function(model) {\n      debug('loaded model', JSON.stringify(model.toJSON(), null, 2));\n      fn(null, model);\n    });\n    this.on('error', function(model, err) {\n      debug('error fetching model', err);\n      fn(err);\n    });\n    debug('fetching app model');\n    this.fetch(opts);\n  },\n  serialize: function() {\n    var res = this.getAttributes({\n      props: true,\n      derived: true\n    }, true);\n    each(this._children, function(value, key) {\n      res[key] = this[key].serialize();\n    }, this);\n    each(this._collections, function(value, key) {\n      res[key] = this[key].serialize();\n    }, this);\n    return res;\n  }\n});\n\nmodule.exports = App;\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/lib/defaults.js":"var path = require('path');\n\nconst ICON_URL = 'https://raw.githubusercontent.com/atom/electron/'\n  + 'master/atom/browser/resources/win/atom.ico';\nconst LOADING_GIF = path.resolve(__dirname, '..', 'resources', 'install-spinner.gif');\nconst ELECTRON_VERSION = '0.29.2';\n\nmodule.exports.ICON_URL = ICON_URL;\nmodule.exports.LOADING_GIF = LOADING_GIF;\nmodule.exports.ELECTRON_VERSION = ELECTRON_VERSION;\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/lib/create-sync-errback.js":"// @todo (imlucas): move this to `ampersand-sync-errback`\nvar createSyncErrback = function(method, model, options) {\n  var fn = options.error;\n  options.error = function(resp) {\n    if (fn) {\n      fn(model, resp, options);\n    }\n    model.trigger('error', model, resp, options);\n  };\n\n  var success = options.success;\n  options.success = function(resp) {\n    if (!model.set(model.parse(resp, options), options)) return false;\n    if (success) {\n      success(model, resp, options);\n    }\n  };\n  return function(err, resp) {\n    if (err) {\n      options.error(err);\n    } else {\n      options.success(resp);\n    }\n  };\n};\n\nmodule.exports = createSyncErrback;\n","/home/travis/build/npmtest/node-npmtest-electron-installer-squirrel-windows/node_modules/electron-installer-squirrel-windows/bin/electron-installer-squirrel-windows.js":"#!/usr/bin/env node\n\nvar path = require('path');\nvar fs = require('fs');\n/*eslint no-sync:0*/\nvar usage = fs.readFileSync(path.resolve(__dirname, '../usage.txt')).toString();\nvar args = require('minimist')(process.argv.slice(2), {\n  boolean: ['debug', 'overwrite']\n});\n\nif (args.debug) {\n  process.env.DEBUG = 'electron-installer-squirrel-windows';\n}\nvar createInstaller = require('../');\nvar pkg = require('../package.json');\n\nargs.path = args._[0];\n\nif (args.help || args.h || !args.path) {\n  console.error(usage);\n  process.exit(1);\n}\nif (args.version) {\n  console.error(pkg.version);\n  process.exit(1);\n}\n\ncreateInstaller(args, function(err) {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n    return;\n  }\n  console.error('Wrote Setup.exe to:\\n' + args.setup_path);\n});\n"}